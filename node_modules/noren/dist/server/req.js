/* IMPORT */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import concat from 'uint8-concat';
import U8 from 'uint8-encoding';
import Address from '../parsers/address.js';
import Cookie from '../parsers/cookie.js';
import Credentials from '../parsers/credentials.js';
import Headers from './headers.js';
import { castArrayBuffer, isArray, Once } from './utils.js';
/* MAIN */
class Req {
    /* CONSTRUCTOR */
    constructor(options) {
        this._body = options.body;
        this._headers = options.headers;
        this._pathname = options.pathname;
        this._url = options.url;
        this.environment = options.environment || {};
        this.method = options.method || '';
        this.params = {};
        this.signal = options.signal || null;
    }
    /* GETTER API */
    get body() {
        if (!this._body)
            return new Uint8Array(0);
        if (isArray(this._body))
            return concat(this._body);
        return this._body;
    }
    get cookies() {
        return Cookie.parse(this.headers.get('Cookie') || '');
    }
    get credentials() {
        return Credentials.parse(this.headers.get('Authorization') || '');
    }
    get headers() {
        return new Headers(this._headers);
    }
    get ip() {
        return this.ips[0];
    }
    get ips() {
        return Address.get(this.headers.get('X-Forwarded-For') || '');
    }
    get path() {
        return this._pathname || this.url.pathname;
    }
    get url() {
        return new URL(this._url);
    }
    /* DETAILS API */
    cookie(key) {
        return this.cookies[key];
    }
    env(key) {
        return this.environment[key];
    }
    header(key) {
        return this.headers.get(key) || undefined;
    }
    param(key) {
        return this.params[key];
    }
    query(key) {
        return this.url.searchParams.get(key) || undefined;
    }
    queries(key) {
        return this.url.searchParams.getAll(key);
    }
    /* BODY API */
    async arrayBuffer() {
        const arrayBuffer = castArrayBuffer(this.body);
        return arrayBuffer;
    }
    async blob() {
        const blob = new Blob([this.body]);
        return blob;
    }
    async formData() {
        const type = this.header('Content-Type') || '';
        if (type === 'application/x-www-form-urlencoded') {
            const text = await this.text();
            const params = new URLSearchParams(text);
            const formData = new FormData();
            params.forEach((value, key) => {
                formData.append(key, value);
            });
            return formData;
        }
        else if (type.startsWith('multipart/form-data')) {
            throw new Error('Multipart processing is unimplemented natively, yet, you need a middleware'); //TODO: Support multi-part forms
        }
        else {
            throw new Error('Invalid body value');
        }
    }
    async json() {
        const text = await this.text();
        const json = JSON.parse(text);
        return json;
    }
    async text() {
        const text = U8.decode(this.body);
        return text;
    }
}
__decorate([
    Once()
], Req.prototype, "body", null);
__decorate([
    Once()
], Req.prototype, "cookies", null);
__decorate([
    Once()
], Req.prototype, "credentials", null);
__decorate([
    Once()
], Req.prototype, "headers", null);
__decorate([
    Once()
], Req.prototype, "ip", null);
__decorate([
    Once()
], Req.prototype, "ips", null);
__decorate([
    Once()
], Req.prototype, "path", null);
__decorate([
    Once()
], Req.prototype, "url", null);
__decorate([
    Once()
], Req.prototype, "arrayBuffer", null);
__decorate([
    Once()
], Req.prototype, "blob", null);
__decorate([
    Once()
], Req.prototype, "formData", null);
__decorate([
    Once()
], Req.prototype, "json", null);
__decorate([
    Once()
], Req.prototype, "text", null);
/* EXPORT */
export default Req;
