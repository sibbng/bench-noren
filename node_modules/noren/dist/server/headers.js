/* MAIN */
// This leads to significantly faster execution than the built-in Headers class
class Headers {
    /* CONSTRUCTOR */
    constructor(headers) {
        /* VARIABLES */
        this.headers = {};
        if (headers) {
            if (Array.isArray(headers)) {
                for (let i = 0, l = headers.length; i < l; i++) {
                    const [key, value] = headers[i];
                    this.set(key, value);
                }
            }
            else {
                headers.forEach((value, key) => {
                    this.set(String(key), String(value));
                });
            }
        }
    }
    /* API */
    append(key, value) {
        key = key.toLowerCase();
        const prev = this.headers[key];
        const next = prev ? `${prev}, ${value}` : value;
        this.headers[key] = next;
    }
    delete(key) {
        delete this.headers[key.toLowerCase()];
    }
    get(key) {
        return this.headers[key.toLowerCase()] || null;
    }
    has(key) {
        return (key.toLowerCase() in this.headers);
    }
    set(key, value) {
        this.headers[key.toLowerCase()] = value;
    }
    keys() {
        return Object.keys(this.headers);
    }
    values() {
        return Object.values(this.headers);
    }
    entries() {
        return Object.entries(this.headers);
    }
    forEach(callback) {
        for (const key in this.headers) {
            callback(this.headers[key], key, this);
        }
    }
}
/* EXPORT */
export default Headers;
