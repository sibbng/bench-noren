import type { Method, Params, Route } from './types';
declare class Router<T> {
    protected handlers: T[];
    protected routes: Route<T>[];
    compile(path: string): RegExp;
    on(method: Method | Method[], path: string | string[], ...handlers: T[]): this;
    route(method: string, path: string): {
        params: Params;
        route: Route<T>;
    } | undefined;
    use(...handlers: T[]): this;
    all(path: string | string[], ...handlers: T[]): this;
    copy(path: string | string[], ...handlers: T[]): this;
    delete(path: string | string[], ...handlers: T[]): this;
    get(path: string | string[], ...handlers: T[]): this;
    head(path: string | string[], ...handlers: T[]): this;
    lock(path: string | string[], ...handlers: T[]): this;
    mkcol(path: string | string[], ...handlers: T[]): this;
    move(path: string | string[], ...handlers: T[]): this;
    options(path: string | string[], ...handlers: T[]): this;
    patch(path: string | string[], ...handlers: T[]): this;
    post(path: string | string[], ...handlers: T[]): this;
    propfind(path: string | string[], ...handlers: T[]): this;
    proppatch(path: string | string[], ...handlers: T[]): this;
    put(path: string | string[], ...handlers: T[]): this;
    search(path: string | string[], ...handlers: T[]): this;
    unlock(path: string | string[], ...handlers: T[]): this;
}
export default Router;
