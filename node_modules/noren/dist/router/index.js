/* IMPORT */
import { METHODS } from './constants.js';
import { compile } from './path.js';
import { castArray, isMethod } from './utils.js';
/* MAIN */
//TODO: Support sub-routers, with their middlewares, for convenience
//TODO: Support path-scoped middlewares, for convenience
class Router {
    constructor() {
        /* VARIABLES */
        this.handlers = [];
        this.routes = [];
    }
    /* API */
    compile(path) {
        return compile(path, false);
    }
    on(method, path, ...handlers) {
        const methods = new Set(castArray(method));
        const paths = castArray(path);
        const pathsRe = paths.map(path => this.compile(path));
        const route = { methods, paths, pathsRe, handlers: [...this.handlers, ...handlers] };
        this.routes.push(route);
        return this;
    }
    route(method, path) {
        method = method.toUpperCase();
        if (!isMethod(method))
            return;
        path = path.replace(/[?#].*/, '');
        for (let i = 0, l = this.routes.length; i < l; i++) {
            const route = this.routes[i];
            if (!route.methods.has(method))
                continue;
            for (let pi = 0, pl = route.pathsRe.length; pi < pl; pi++) {
                const match = route.pathsRe[pi].exec(path);
                if (!match)
                    continue;
                const params = match.groups || {};
                return { params, route };
            }
        }
    }
    use(...handlers) {
        this.handlers.push(...handlers);
        return this;
    }
    /* METHOD API */
    all(path, ...handlers) {
        return this.on(METHODS, path, ...handlers);
    }
    copy(path, ...handlers) {
        return this.on('COPY', path, ...handlers);
    }
    delete(path, ...handlers) {
        return this.on('DELETE', path, ...handlers);
    }
    get(path, ...handlers) {
        return this.on('GET', path, ...handlers);
    }
    head(path, ...handlers) {
        return this.on('HEAD', path, ...handlers);
    }
    lock(path, ...handlers) {
        return this.on('LOCK', path, ...handlers);
    }
    mkcol(path, ...handlers) {
        return this.on('MKCOL', path, ...handlers);
    }
    move(path, ...handlers) {
        return this.on('MOVE', path, ...handlers);
    }
    options(path, ...handlers) {
        return this.on('OPTIONS', path, ...handlers);
    }
    patch(path, ...handlers) {
        return this.on('PATCH', path, ...handlers);
    }
    post(path, ...handlers) {
        return this.on('POST', path, ...handlers);
    }
    propfind(path, ...handlers) {
        return this.on('PROPFIND', path, ...handlers);
    }
    proppatch(path, ...handlers) {
        return this.on('PROPPATCH', path, ...handlers);
    }
    put(path, ...handlers) {
        return this.on('PUT', path, ...handlers);
    }
    search(path, ...handlers) {
        return this.on('SEARCH', path, ...handlers);
    }
    unlock(path, ...handlers) {
        return this.on('UNLOCK', path, ...handlers);
    }
}
/* EXPORT */
export default Router;
