declare const castArrayBuffer: (uint8: Uint8Array) => ArrayBuffer;
declare const castError: (exception: unknown) => Error;
declare const isArray: (value: unknown) => value is any[];
declare const isError: (value: unknown) => value is Error;
declare const isFunction: (value: unknown) => value is Function;
declare const isPromise: (value: unknown) => value is Promise<unknown>;
declare const isStream: (value: unknown) => value is ReadableStream<any>;
declare const isString: (value: unknown) => value is string;
declare const memoize: <T, U>(fn: (arg: T) => U) => (arg: T) => U;
declare const Once: () => (target: Object, key: string, descriptor: TypedPropertyDescriptor<any>) => any;
export { castArrayBuffer, castError, isArray, isError, isFunction, isPromise, isStream, isString, memoize, Once };
