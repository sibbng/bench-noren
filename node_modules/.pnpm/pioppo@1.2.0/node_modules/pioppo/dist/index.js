/* IMPORT */
import whenExit from 'when-exit';
import scheduler from './scheduler.js';
import { isTransportMultiple } from './utils.js';
/* MAIN */
class Pioppo {
    /* CONSTRUCTOR */
    constructor(options = {}) {
        /* VARIABLES */
        this.errors = [];
        this.warns = [];
        this.infos = [];
        this.debugs = [];
        this.scheduled = false;
        this.scheduler = options.scheduler || scheduler;
        this.transports = options.transports || [console];
        whenExit(this.flush.bind(this));
    }
    /* LOGGING API */
    error(message) {
        this.errors.push(message);
        this.schedule();
    }
    warn(message) {
        this.warns.push(message);
        this.schedule();
    }
    info(message) {
        this.infos.push(message);
        this.schedule();
    }
    debug(message) {
        this.debugs.push(message);
        this.schedule();
    }
    /* SCHEDULING API */
    flush() {
        const errors = this.errors.length ? this.errors.join('\n') : undefined;
        const warns = this.warns.length ? this.warns.join('\n') : undefined;
        const infos = this.infos.length ? this.infos.join('\n') : undefined;
        const debugs = this.debugs.length ? this.debugs.join('\n') : undefined;
        if (errors)
            this.errors = [];
        if (warns)
            this.warns = [];
        if (infos)
            this.infos = [];
        if (debugs)
            this.debugs = [];
        for (let i = 0, l = this.transports.length; i < l; i++) {
            const transport = this.transports[i];
            if (isTransportMultiple(transport)) {
                if (errors)
                    transport.error(errors);
                if (warns)
                    transport.warn(warns);
                if (infos)
                    transport.info(infos);
                if (debugs)
                    transport.debug(debugs);
            }
            else {
                if (errors)
                    transport(errors);
                if (warns)
                    transport(warns);
                if (infos)
                    transport(infos);
                if (debugs)
                    transport(debugs);
            }
        }
    }
    schedule() {
        if (this.scheduled) {
            this.schedulerCb?.();
        }
        else {
            this.scheduled = true;
            this.schedulerCb = this.scheduler(() => {
                this.scheduled = false;
                this.flush();
            });
        }
    }
}
/* EXPORT */
export default Pioppo;
